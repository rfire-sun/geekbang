package com.sun.geekbang.TrainingCamp.week03.mynetty;


import com.sun.geekbang.TrainingCamp.week03.mynetty.router.RandomHttpEndpointRouter;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.socket.SocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;

import java.util.List;


/**
* ChannelInitializer的主要目的是为程序员提供了一个简单的工具，用于在某个Channel注册到EventLoop后，
* 对这个Channel执行一些初始化操作。ChannelInitializer虽然会在一开始会被注册到Channel相关的pipeline里，
* 但是在初始化完成之后，ChannelInitializer会将自己从pipeline中移除，不会影响后续的操作。
*/
public class HttpInitializer extends ChannelInitializer<SocketChannel> {

    private List<String> proxyServer;


    // 初始化器 我的理解
    public HttpInitializer() {
    }
    public HttpInitializer(List<String> proxyServer) {
        this.proxyServer = proxyServer;
    }

    @Override
    protected void initChannel(SocketChannel socketChannel) throws Exception {
        //获得流水线
        ChannelPipeline pipeline = socketChannel.pipeline();
        pipeline.addLast(new HttpServerCodec());
        pipeline.addLast(new HttpObjectAggregator(1024 * 1024));
        //添加处理器
        pipeline.addLast(new HttpHandler(proxyServer));
    }
}
